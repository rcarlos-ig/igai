<script>
  // HTML Legend plugin
  const getOrCreateLegendList = (chart, id) => {
    const legendContainer = document.getElementById(id);
    let listContainer = legendContainer.querySelector('ul');

    if (!listContainer) {
      listContainer = document.createElement('ul');
      listContainer.style.display = 'flex';
      listContainer.style.flexDirection = 'row';
      listContainer.style.flexWrap = 'wrap';
      listContainer.style.justifyContent = 'center';
      listContainer.style.gap = '1rem';
      listContainer.style.margin = 0;
      listContainer.style.padding = 0;

      legendContainer.appendChild(listContainer);
    }

    return listContainer;
  };

  const htmlLegendPlugin = {
    id: 'htmlLegend',
    afterUpdate(chart, args, options) {
      const ul = getOrCreateLegendList(chart, options.containerID);

      // Remove old legend items
      while (ul.firstChild) {
        ul.firstChild.remove();
      }

      // Reuse the built-in legendItems generator
      const items = chart.options.plugins.legend.labels.generateLabels(chart);

      items.forEach(item => {
        const li = document.createElement('li');
        li.style.alignItems = 'center';
        li.style.cursor = 'pointer';
        li.style.display = 'flex';
        li.style.flexDirection = 'row';
        li.style.gap = '.5rem';

        li.onclick = () => {
          const {type} = chart.config;
          if (type === 'pie' || type === 'doughnut') {
            // Pie and doughnut charts only have a single dataset and visibility is per item
            chart.toggleDataVisibility(item.index);
          } else {
            chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));
          }
          chart.update();
        };

        // Color box
        const boxSpan = document.createElement('span');
        boxSpan.style.background = item.fillStyle;
        boxSpan.style.borderColor = item.strokeStyle;
        boxSpan.style.borderWidth = item.lineWidth + 'px';
        boxSpan.style.display = 'inline-block';
        boxSpan.style.height = '20px';
        boxSpan.style.width = '20px';
        boxSpan.style.borderWidth = 0;

        // Text
        const textContainer = document.createElement('p');
        textContainer.style.color = item.fontColor;
        textContainer.style.margin = 0;
        textContainer.style.padding = 0;
        textContainer.style.textDecoration = item.hidden ? 'line-through' : '';

        const text = document.createTextNode(item.text);
        textContainer.appendChild(text);

        li.appendChild(boxSpan);
        li.appendChild(textContainer);
        ul.appendChild(li);
      });
    }
  };

  // Default chart data
  const activeSchools = <%- JSON.stringify(activeSchools) %>;
  const ctx = document.getElementById("chart");
  const data = <%- JSON.stringify(data) %>;
  const colors = [
    "rgb(149, 195, 252)",
    "rgb(78, 155, 250)",
    "rgb(8, 116, 247)",
    "rgb(5, 82, 177)",
    "rgb(3, 49, 106)",
    "rgb(1, 16, 35)",
  ];

  Chart.defaults.font.family = "'Jost', sans-serif";
  Chart.defaults.font.size = 16;
  Chart.defaults.font.lineHeight = 1.25;
  Chart.defaults.color = "rgb(16, 21, 25)";
  Chart.defaults.borderColor = "rgb(107, 114, 128)";

  if (typeof html === undefined) {
    const html = document.getElementById("html");
  }

  if (html.classList.contains("dark"))
    Chart.defaults.color = "rgb(249, 250, 251)";

  const options = {
    locale: "pt-BR",
    responsive: true,
    scales: {
      x: {
        stacked: true,
        grid: {
          borderWidth: 2,
          color: Chart.defaults.borderColor,
        },
      },
      y: {
        stacked: true,
        display: false,
      },
    },
    layout: {
      padding: 15,
    },
    interaction: {
      mode: "index",
    },
    plugins: {
      htmlLegend: {
        containerID: "legend-container",
      },
      legend: {
        display: false,
      },
    },
    maintainAspectRatio: false,
  }

  // Default chart
  let chart = new Chart(ctx, {
    type: "bar",
    data: data,
    options: options,
    plugins: [htmlLegendPlugin],
  });

  chart.data.datasets.forEach((dataset, index) => {
    dataset.backgroundColor = colors[index];
  });
  chart.update();

  const total = activeSchools.length;
  const percentage = (tooltipItems) => {
    let percentage = 0;

    tooltipItems.forEach(function (tooltipItem) {
      percentage = Number(tooltipItem.formattedValue) / total;
    });

    return percentage.toLocaleString("default", {
      style: "percent",
      maximumFractionDigits: 1,
    });
  };

  // New charts based on user choice
  function updateChart() {
    const field = document.getElementById("fieldSelect").value;

    // Ocupação chart
    if (field === "ocupacao") {
      let ocupacoes = [];

      activeSchools.forEach(school => {
        ocupacoes.push(school.ocupacao);
      });

      const labels = [...new Set(ocupacoes)];

      let datasetValues = [];

      labels.forEach(label => {
        datasetValues.push(0);
      })

      activeSchools.forEach(school => {
        for (let index = 0; index < labels.length; index++) {
          if (school.ocupacao === labels[index]) {
            datasetValues[index] += 1;
          }
        }
      });

      const datasets = [{
        label: "Ocupações por tipo.",
        data: datasetValues,
        backgroundColor: colors,
      }];

      const data = {
        labels: labels,
        datasets: datasets,
      };

      const options = {
        locale: "pt-BR",
        responsive: true,
        layout: {
          padding: 15,
        },
        interaction: {
          mode: "index",
        },
        plugins: {
          tooltip: {
            callbacks: {
              footer: percentage,
            },
          },
          htmlLegend: {
            containerID: "legend-container",
          },
          legend: {
            display: false,
          },
        },
        maintainAspectRatio: false,
      }

      chart.destroy();
      chart = new Chart(ctx, {
        type: "doughnut",
        data: data,
        options: options,
        plugins: [htmlLegendPlugin],
      });
      chart.update();

      document.getElementById("graphTitle").textContent = field;

    } else if (field === "avaliacao") { // Avaliação chart

      const labels = [
        "Não Avaliado",
        "Ótimo",
        "Bom",
        "Regular",
        "Ruim",
        "Péssimo"
      ];

      let datasetValues = [0, 0, 0, 0, 0, 0];

      activeSchools.forEach(school => {
        for (let index = 0; index < labels.length; index++) {
          if (school.avaliacao === labels[index]) {
            datasetValues[index] += 1;
          }
        }
      })

      const datasets = [{
        label: "Avaliações por tipo.",
        data: datasetValues,
        backgroundColor: colors,
      }];

      const data = {
        labels: labels,
        datasets: datasets,
      };

      const options = {
        locale: "pt-BR",
        responsive: true,
        layout: {
          padding: 15,
        },
        interaction: {
          mode: "index",
        },
        plugins: {
          tooltip: {
            callbacks: {
              footer: percentage,
            },
          },
          htmlLegend: {
            containerID: "legend-container",
          },
          legend: {
            display: false,
          },
        },
        maintainAspectRatio: false,
      }

      chart.destroy();
      chart = new Chart(ctx, {
        type: "doughnut",
        data: data,
        options: options,
        plugins: [htmlLegendPlugin],
      });
      chart.update();

      document.getElementById("graphTitle").textContent = field;

    } else { // Other charts

      const labels = [
      "Não se aplica",
      "Nota 1",
      "Nota 2",
      "Nota 3",
      "Nota 4",
      "Nota 5",
      ];
      const datasets = [];

      for (const key in activeSchools[0][field]) {
        if (Object.hasOwnProperty.call(activeSchools[0][field], key)) {
          datasets.push({label: key, data: [0, 0, 0, 0, 0, 0]})
        }
      };

      activeSchools.forEach(school => {
        datasets.forEach(data => {
          const label = data.label;
          switch (school[field][label]) {
            case 1:
              data.data[1] += 1;
              break;

            case 2:
              data.data[2] += 1;
              break;

            case 3:
              data.data[3] += 1;
              break;

            case 4:
              data.data[4] += 1;
              break;

            case 5:
              data.data[5] += 1;
              break;

            default:
              data.data[0] += 1;
              break;
          }
        })
      });

      const data = {
        labels: labels,
        datasets: datasets,
      };

      const originalText = [
        "codigo",
        "ocupacao",
        "avaliacao",
        "instalacoes",
        "eletricas",
        "hidraulicas",
        "sanitarias",
        "impermeabilizacao",
        "predio",
        "reservatorio",
        "cercaTela",
        "iluminacao",
        "calcada"
      ];

      const replacedText = [
        "código",
        "ocupação",
        "avaliação",
        "instalações",
        "elétricas",
        "hidráulicas",
        "sanitárias",
        "impermeabilização",
        "prédio",
        "reservatório",
        "Cerca/Tela",
        "iluminação",
        "calçada"
      ];

      originalText.forEach((text, index) => {
        data.datasets.forEach(dataset => {
          if (dataset.label === text) dataset.label = replacedText[index];
        })
      })

      data.datasets.forEach(dataset => {
        dataset.label = dataset.label.charAt(0).toUpperCase() + dataset.label.slice(1);
      })

      chart.destroy();
      chart = new Chart(ctx, {
        type: "bar",
        data: data,
        options: options,
        plugins: [htmlLegendPlugin],
      });
      chart.data.datasets.forEach((dataset, index) => {
        dataset.backgroundColor = colors[index];
      });
      chart.update();

      document.getElementById("graphTitle").textContent = field;

      originalText.forEach((text, index) => {
        if (document.getElementById("graphTitle").textContent === text) {
          document.getElementById("graphTitle").textContent = replacedText[index];
        }
      })
    }
  }
</script>

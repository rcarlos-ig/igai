<script src="/js/chart-3.7.1.min.js" async></script>

<script type="text/javascript">
  window.onload = function () {
    const canvas = document.getElementById("dashboardChart");
    const ctx = canvas.getContext("2d");

    const labels = "<%= chartLabels %>";
    const data = "<%= chartData %>";

    // HTML Legend plugin
    const getOrCreateLegendList = (chart, id) => {
      const legendContainer = document.getElementById(id);
      let listContainer = legendContainer.querySelector("ul");

      if (!listContainer) {
        listContainer = document.createElement("ul");
        listContainer.style.display = "flex";
        listContainer.style.flexDirection = "row";
        listContainer.style.flexWrap = "wrap";
        listContainer.style.justifyContent = "center";
        listContainer.style.gap = "1rem";
        listContainer.style.margin = 0;
        listContainer.style.padding = 0;

        legendContainer.appendChild(listContainer);
      }

      return listContainer;
    };

    const htmlLegendPlugin = {
      id: "htmlLegend",
      afterUpdate(chart, args, options) {
        const ul = getOrCreateLegendList(chart, options.containerID);

        // Remove old legend items
        while (ul.firstChild) {
          ul.firstChild.remove();
        }

        // Reuse the built-in legendItems generator
        const items = chart.options.plugins.legend.labels.generateLabels(chart);

        items.forEach((item) => {
          const li = document.createElement("li");
          li.style.alignItems = "center";
          li.style.cursor = "pointer";
          li.style.display = "flex";
          li.style.flexDirection = "row";
          li.style.gap = ".5rem";

          li.onclick = () => {
            const { type } = chart.config;
            if (type === "pie" || type === "doughnut") {
              // Pie and doughnut charts only have a single dataset and visibility is per item
              chart.toggleDataVisibility(item.index);
            } else {
              chart.setDatasetVisibility(
                item.datasetIndex,
                !chart.isDatasetVisible(item.datasetIndex)
              );
            }
            chart.update();
          };

          // Color box
          const boxSpan = document.createElement("span");
          boxSpan.style.background = item.fillStyle;
          boxSpan.style.borderColor = item.strokeStyle;
          boxSpan.style.borderWidth = item.lineWidth + "px";
          boxSpan.style.display = "inline-block";
          boxSpan.style.height = "20px";
          boxSpan.style.width = "20px";
          boxSpan.style.borderWidth = 0;

          // Text
          const textContainer = document.createElement("p");
          textContainer.style.color = item.fontColor;
          textContainer.style.margin = 0;
          textContainer.style.padding = 0;
          textContainer.style.textDecoration = item.hidden
            ? "line-through"
            : "";

          const text = document.createTextNode(item.text);
          textContainer.appendChild(text);

          li.appendChild(boxSpan);
          li.appendChild(textContainer);
          ul.appendChild(li);
        });
      },
    };

    function soma() {
      const values = data.split(",");
      let subtotal = 0;
      values.forEach((value) => {
        subtotal += Number(value);
      });
      return subtotal;
    }

    const percentage = (tooltipItems) => {
      let percentage = 0;

      tooltipItems.forEach(function (tooltipItem) {
        percentage = Number(tooltipItem.formattedValue) / soma();
      });

      return percentage.toLocaleString("default", {
        style: "percent",
        maximumFractionDigits: 1,
      });
    };

    Chart.defaults.font.family = "'Jost', sans-serif";
    Chart.defaults.font.size = 16;
    Chart.defaults.font.lineHeight = 1.25;
    Chart.defaults.color = "rgb(16, 21, 25)";

    const html = document.getElementById("html");
    if (html.classList.contains("dark"))
      Chart.defaults.color = "rgb(249, 250, 251)";

    // Datasets colors
    const colors = [
      "rgb(149, 195, 252)",
      "rgb(78, 155, 250)",
      "rgb(8, 116, 247)",
      "rgb(5, 82, 177)",
      "rgb(3, 49, 106)",
      "rgba(185, 28, 28, 1)",
    ];

    const chart = new Chart(ctx, {
      type: "doughnut",
      data: {
        labels: labels.split(","),
        datasets: [
          {
            label: "Avaliações por tipo",
            data: data.split(","),
            backgroundColor: colors,
            hoverOffset: 20,
          },
        ],
      },
      options: {
        layout: {
          padding: 15,
        },
        interaction: {
          mode: "index",
        },
        plugins: {
          tooltip: {
            callbacks: {
              footer: percentage,
            },
          },
          htmlLegend: {
            containerID: "legend-container",
          },
          legend: {
            display: false,
          },
        },
        aspectRatio: 2,
      },
      plugins: [htmlLegendPlugin],
    });
  };

  // window.scrollTo(0,0);
</script>
